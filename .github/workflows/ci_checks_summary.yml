name: CI ‚Äî Summary via Check Suite

on:
  workflow_run:
    workflows:
      - "Code Quality Check"
      - "Run Backend Unittests"
      - "Commitlint"
      - "Enforce Branch Naming Convention"
    types: [completed]

permissions:
  actions: read
  checks: read
  contents: read

concurrency:
  group: checksuite-${{ github.event.workflow_run.head_sha }}
  cancel-in-progress: true

jobs:
  summarize-and-notify:
    if: >-
      ${{ github.event.workflow_run.event == 'pull_request' &&
          (github.event.workflow_run.pull_requests && github.event.workflow_run.pull_requests[0]) }}
    runs-on: ubuntu-latest
    steps:
      - name: Determine head SHA
        id: head
        run: |
          echo "head_sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT
        env:
          GITHUB_SHA: ${{ github.event.workflow_run.head_sha }}

      - name: Wait to prevent race conditions
        run: |
          # Add a small delay to prevent race conditions when multiple workflows complete simultaneously
          sleep 10

      - name: Gather workflow runs for this commit
        id: gather
        uses: actions/github-script@v6
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const head_sha = process.env['INPUT_HEAD_SHA'];
            const currentRunId = parseInt(process.env['CURRENT_RUN_ID'] || '0', 10);
            const currentWorkflow = process.env['CURRENT_WORKFLOW'];
            const expectedWorkflows = process.env['EXPECTED_WORKFLOWS'].split(',');
            
            if (!head_sha) {
              core.setOutput('should_post','false');
              core.setOutput('reason','no head_sha found');
              return;
            }

            const resp = await github.rest.actions.listWorkflowRunsForRepo({
              owner,
              repo,
              head_sha,
              per_page: 200
            });
            const runs = resp.data.workflow_runs || [];

            // Filter to only the expected workflows and exclude this summary workflow
            const relevantRuns = runs.filter(r => 
              r.id !== currentRunId && 
              r.name !== currentWorkflow &&
              expectedWorkflows.includes(r.name)
            );

            // Check if all expected workflows have completed
            const completedRuns = relevantRuns.filter(r => r.status === 'completed');
            const notCompleted = relevantRuns.filter(r => r.status !== 'completed');
            
            core.info(`Expected workflows: ${expectedWorkflows.join(', ')}`);
            core.info(`Found ${completedRuns.length} completed, ${notCompleted.length} still running`);
            
            if (notCompleted.length > 0) {
              core.info(`Still running: ${notCompleted.map(r => r.name).join(', ')}`);
              core.setOutput('should_post','false');
              core.setOutput('reason','waiting for other runs to complete');
              return;
            }

            // Check if we have all expected workflows
            const completedWorkflowNames = completedRuns.map(r => r.name);
            const missingWorkflows = expectedWorkflows.filter(name => !completedWorkflowNames.includes(name));
            
            if (missingWorkflows.length > 0) {
              core.info(`Missing workflows: ${missingWorkflows.join(', ')}`);
              core.setOutput('should_post','false');
              core.setOutput('reason','waiting for missing workflows');
              return;
            }

            // Check if a summary has already been posted recently (within last 5 minutes)
            const recentSummaryRuns = runs.filter(r => 
              r.name === currentWorkflow && 
              r.status === 'completed' && 
              r.conclusion === 'success' &&
              new Date(r.created_at) > new Date(Date.now() - 5 * 60 * 1000) // 5 minutes ago
            );
            
            if (recentSummaryRuns.length > 0) {
              core.info(`Summary already posted recently (${recentSummaryRuns.length} runs found)`);
              core.setOutput('should_post','false');
              core.setOutput('reason','summary already posted recently');
              return;
            }

            // Create summary with proper status formatting
            const summary = completedRuns.map(r => {
              const status = r.conclusion === 'success' ? '‚úÖ success' : 
                           r.conclusion === 'failure' ? '‚ùå failure' : 
                           r.conclusion === 'cancelled' ? '‚èπÔ∏è cancelled' :
                           r.conclusion === 'skipped' ? '‚è≠Ô∏è skipped' :
                           `‚ö†Ô∏è ${r.conclusion}`;
              return `‚Ä¢ **${r.name}**: ${status} ‚Äî [View Details](${r.html_url})`;
            });

            core.setOutput('should_post','true');
            core.setOutput('summary_text', summary.join("\n"));
        env:
          INPUT_HEAD_SHA: ${{ steps.head.outputs.head_sha }}
          CURRENT_RUN_ID: ${{ github.run_id }}
          CURRENT_WORKFLOW: ${{ github.workflow }}
          EXPECTED_WORKFLOWS: "Code Quality Check,Run Backend Unittests,Commitlint,Enforce Branch Naming Convention"

      - name: Post summary to Slack
        if: steps.gather.outputs.should_post == 'true'
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_PR_ALERT_BOT_TOKEN }}
          payload: |
            {
              "channel": "C09KZ76KY0G",
              "text": "CI Summary for commit ${{ steps.head.outputs.head_sha }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "üîç CI Summary"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Commit: `<https://github.com/${{ github.repository }}/commit/${{ steps.head.outputs.head_sha }}|${{ steps.head.outputs.head_sha }}>`"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.gather.outputs.summary_text }}"
                  }
                }
              ]
            }

      - name: Finished (no-op)
        if: steps.gather.outputs.should_post != 'true'
        env:
          REASON: ${{ steps.gather.outputs.reason }}
        run: |
          echo "No Slack post yet (reason: ${REASON:-waiting})"
