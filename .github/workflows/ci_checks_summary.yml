name: CI ‚Äî Summary via Check Suite

on:
  workflow_run:
    workflows:
      - "Code Quality Check"
      - "Run Backend Unittests"
      - "Commitlint"
      - "Enforce Branch Naming Convention"
    types: [completed]

permissions:
  actions: read
  checks: read
  contents: read
  pull-requests: read

concurrency:
  group: checksuite-${{ github.event.workflow_run.head_sha }}
  cancel-in-progress: true

jobs:
  summarize-and-notify:
    if: >-
      ${{ github.event.workflow_run.event == 'pull_request' &&
          (github.event.workflow_run.pull_requests && github.event.workflow_run.pull_requests[0]) }}
    runs-on: ubuntu-latest
    steps:
      - name: Determine head SHA and PR info
        id: head
        run: |
          echo "head_sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
        env:
          GITHUB_SHA: ${{ github.event.workflow_run.head_sha }}
          PR_NUMBER: ${{ github.event.workflow_run.pull_requests[0].number }}

      - name: Wait for all workflows to complete
        id: wait
        uses: fountainhead/action-wait-for-check@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: |
            Code Quality Check
            Run Django Unittests
            Commitlint
            Enforce Branch Naming Convention
          ref: ${{ github.event.workflow_run.head_sha }}
          timeoutSeconds: 200
          intervalSeconds: 30

      - name: Gather workflow results
        id: gather
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const head_sha = process.env['INPUT_HEAD_SHA'];
            const currentRunId = parseInt(process.env['CURRENT_RUN_ID'] || '0', 10);

            if (!head_sha) {
              core.setOutput('should_post','false');
              core.setOutput('reason','no head_sha found');
              return;
            }

            // Get all workflow runs for this commit
            const runsResponse = await github.rest.actions.listWorkflowRunsForRepo({
              owner,
              repo,
              head_sha,
              per_page: 100
            });
            const runs = runsResponse.data.workflow_runs || [];

            // Define the workflows we're interested in
            const targetWorkflows = [
              'Code Quality Check',
              'Run Backend Unittests',
              'Commitlint',
              'Enforce Branch Naming Convention'
            ];

            // Filter for relevant completed runs
            const relevantRuns = runs.filter(r =>
              r.id !== currentRunId &&
              targetWorkflows.includes(r.name) &&
              r.status === 'completed' &&
              r.conclusion
            );

            if (relevantRuns.length === 0) {
              core.setOutput('should_post','false');
              core.setOutput('reason','no relevant workflow runs found');
              return;
            }

            // Check if all target workflows have completed
            const completedWorkflows = new Set(relevantRuns.map(r => r.name));
            const missingWorkflows = targetWorkflows.filter(w => !completedWorkflows.has(w));

            if (missingWorkflows.length > 0) {
              core.info(`Still waiting for: ${missingWorkflows.join(', ')}`);
              core.setOutput('should_post','false');
              core.setOutput('reason',`waiting for workflows: ${missingWorkflows.join(', ')}`);
              return;
            }

            // Create summary with proper status mapping
            const summary = relevantRuns.map(r => {
              const status = r.conclusion === 'success' ? '‚úÖ success' :
                           r.conclusion === 'failure' ? '‚ùå failure' :
                           r.conclusion === 'cancelled' ? 'üö´ cancelled' :
                           r.conclusion === 'skipped' ? '‚è≠Ô∏è skipped' : `‚ùì ${r.conclusion}`;

              return `‚Ä¢ ${r.name}: ${status} ‚Äî ${r.html_url}`;
            });

            core.setOutput('should_post','true');
            core.setOutput('summary_text', summary.join("\n"));

            // Count failures for the Slack message
            const failures = relevantRuns.filter(r => r.conclusion === 'failure').length;
            const total = relevantRuns.length;
            core.setOutput('failure_count', failures.toString());
            core.setOutput('total_count', total.toString());
        env:
          INPUT_HEAD_SHA: ${{ steps.head.outputs.head_sha }}
          CURRENT_RUN_ID: ${{ github.run_id }}

      - name: Post summary to Slack
        if: steps.gather.outputs.should_post == 'true'
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_PR_ALERT_BOT_TOKEN }}
          payload: |
            {
              "channel": "C09KZ76KY0G",
              "text": "CI summary for PR #${{ steps.head.outputs.pr_number }} - ${{ steps.gather.outputs.total_count }} checks, ${{ steps.gather.outputs.failure_count }} failed",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "üîç CI Check Results"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*PR #${{ steps.head.outputs.pr_number }}* <https://github.com/${{ github.repository }}/pull/${{ steps.head.outputs.pr_number }}|${{ github.repository }}#${{ steps.head.outputs.pr_number }}>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Commit:* <https://github.com/${{ github.repository }}/commit/${{ steps.head.outputs.head_sha }}|${{ steps.head.outputs.head_sha }}>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.gather.outputs.summary_text }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*üìä Summary: ${{ steps.gather.outputs.total_count }} checks completed, ${{ steps.gather.outputs.failure_count }} failures*"
                  }
                }
              ]
            }

      - name: Finished (no-op)
        if: steps.gather.outputs.should_post != 'true'
        run: |
          echo "No Slack post yet (reason: ${{ steps.gather.outputs.reason }})"
