name: CI ‚Äî Summary via Check Suite

on:
  workflow_run:
    workflows:
      - "Code Quality Check"
      - "Run Backend Unittests"
      - "Commitlint"
      - "Enforce Branch Naming Convention"
    types: [completed]
    branches:
      - '**'

permissions:
  actions: read
  checks: read
  contents: read
  pull-requests: read

# Prevent multiple summary workflows for the same commit
concurrency:
  group: ci-summary-${{ github.event.workflow_run.head_sha }}
  cancel-in-progress: false

jobs:
  summarize-and-notify:
    if: >-
      ${{ github.event.workflow_run.event == 'pull_request' &&
          github.event.workflow_run.pull_requests[0] }}
    runs-on: ubuntu-latest
    steps:
      - name: Determine head SHA and PR info
        id: head
        run: |
          echo "üîç CI Summary workflow triggered"
          echo "Workflow run event: ${{ github.event.workflow_run.event }}"
          echo "Head SHA: ${{ github.event.workflow_run.head_sha }}"
          echo "Triggering workflow: ${{ github.event.workflow_run.name }}"

          if [ -n "${{ github.event.workflow_run.pull_requests[0] }}" ]; then
            echo "PR Number: ${{ github.event.workflow_run.pull_requests[0].number }}"
            echo "head_sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT
            echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
          else
            echo "‚ùå No PR information found, exiting"
            exit 1
          fi
        env:
          GITHUB_SHA: ${{ github.event.workflow_run.head_sha }}
          PR_NUMBER: ${{ github.event.workflow_run.pull_requests[0].number }}

      - name: Wait for all workflows to complete
        id: wait
        run: |
          echo "‚è≥ Waiting for all required workflows to complete..."
          echo "Target workflows: Code Quality Check, Run Backend Unittests, Commitlint, Enforce Branch Naming Convention"
          echo "Commit SHA: ${{ github.event.workflow_run.head_sha }}"

          # Wait up to 10 minutes for all workflows to complete
          max_attempts=3
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "üîÑ Check attempt $attempt of $max_attempts"

            # Get all workflow runs for this commit
            runs_response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs?head_sha=${{ github.event.workflow_run.head_sha }}&per_page=100")

            # Check if all required workflows are completed
            missing_workflows=""

            # Check Code Quality Check
            if ! echo "$runs_response" | jq -e '.workflow_runs[] | select(.name == "Code Quality Check" and .status == "completed")' > /dev/null; then
              missing_workflows="$missing_workflows Code Quality Check"
            fi

            # Check Run Backend Unittests
            if ! echo "$runs_response" | jq -e '.workflow_runs[] | select(.name == "Run Backend Unittests" and .status == "completed")' > /dev/null; then
              missing_workflows="$missing_workflows Run Backend Unittests"
            fi

            # Check Commitlint
            if ! echo "$runs_response" | jq -e '.workflow_runs[] | select(.name == "Commitlint" and .status == "completed")' > /dev/null; then
              missing_workflows="$missing_workflows Commitlint"
            fi

            # Check Enforce Branch Naming Convention
            if ! echo "$runs_response" | jq -e '.workflow_runs[] | select(.name == "Enforce Branch Naming Convention" and .status == "completed")' > /dev/null; then
              missing_workflows="$missing_workflows Enforce Branch Naming Convention"
            fi

            # Check if any workflows are still running (not completed)
            running_workflows=$(echo "$runs_response" | jq -r '.workflow_runs[] | select(.status != "completed") | .name' | sort | uniq)

            if [ -n "$running_workflows" ]; then
              echo "‚è≥ Still running workflows: $running_workflows"
              missing_workflows="$missing_workflows $running_workflows"
            fi

            # If no missing workflows, we're done
            if [ -z "$missing_workflows" ]; then
              echo "‚úÖ All workflows completed!"
              echo "completed=true" >> $GITHUB_OUTPUT
              exit 0
            fi

            echo "‚è≥ Still waiting for:$missing_workflows"

            # Wait before next check (30 seconds)
            if [ $attempt -lt $max_attempts ]; then
              sleep 30
            fi

            attempt=$((attempt + 1))
          done

          echo "‚ùå Timeout waiting for workflows to complete"
          echo "completed=false" >> $GITHUB_OUTPUT
          exit 1

      - name: Gather workflow results
        id: gather
        if: steps.wait.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const head_sha = process.env['INPUT_HEAD_SHA'];
            const currentRunId = parseInt(process.env['CURRENT_RUN_ID'] || '0', 10);

            if (!head_sha) {
              core.setOutput('should_post','false');
              core.setOutput('reason','no head_sha found');
              return;
            }

            // Get all workflow runs for this commit
            const runsResponse = await github.rest.actions.listWorkflowRunsForRepo({
              owner,
              repo,
              head_sha,
              per_page: 100
            });
            const runs = runsResponse.data.workflow_runs || [];

            // Define the workflows we're interested in
            const targetWorkflows = [
              'Code Quality Check',
              'Run Backend Unittests',
              'Commitlint',
              'Enforce Branch Naming Convention'
            ];

            // Filter for relevant completed runs with conclusions
            const relevantRuns = runs.filter(r =>
              r.id !== currentRunId &&
              targetWorkflows.includes(r.name) &&
              r.status === 'completed' &&
              r.conclusion &&
              ['success', 'failure', 'cancelled', 'skipped'].includes(r.conclusion)
            );

            if (relevantRuns.length === 0) {
              core.setOutput('should_post','false');
              core.setOutput('reason','no relevant workflow runs found');
              return;
            }

            // Double-check that all target workflows are present and completed
            const completedWorkflows = new Set(relevantRuns.map(r => r.name));
            const missingWorkflows = targetWorkflows.filter(w => !completedWorkflows.has(w));

            if (missingWorkflows.length > 0) {
              core.info(`Still missing completed workflows: ${missingWorkflows.join(', ')}`);
              core.setOutput('should_post','false');
              core.setOutput('reason',`missing completed workflows: ${missingWorkflows.join(', ')}`);
              return;
            }

            // Create summary with proper status mapping
            const summary = relevantRuns.map(r => {
              const status = r.conclusion === 'success' ? '‚úÖ success' :
                           r.conclusion === 'failure' ? '‚ùå failure' :
                           r.conclusion === 'cancelled' ? 'üö´ cancelled' :
                           r.conclusion === 'skipped' ? '‚è≠Ô∏è skipped' : `‚ùì ${r.conclusion}`;

              return `‚Ä¢ ${r.name}: ${status} ‚Äî ${r.html_url}`;
            });

            core.setOutput('should_post','true');
            core.setOutput('summary_text', summary.join("\n"));

            // Count failures for the Slack message
            const failures = relevantRuns.filter(r => r.conclusion === 'failure').length;
            const total = relevantRuns.length;
            core.setOutput('failure_count', failures.toString());
            core.setOutput('total_count', total.toString());

            core.info(`Found ${relevantRuns.length} completed workflows: ${relevantRuns.map(r => r.name).join(', ')}`);
        env:
          INPUT_HEAD_SHA: ${{ steps.head.outputs.head_sha }}
          CURRENT_RUN_ID: ${{ github.run_id }}

      - name: Post summary to Slack
        if: steps.gather.outputs.should_post == 'true'
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_PR_ALERT_BOT_TOKEN }}
          payload: |
            {
              "channel": "C09KZ76KY0G",
              "text": "CI summary for PR #${{ steps.head.outputs.pr_number }} - ${{ steps.gather.outputs.total_count }} checks, ${{ steps.gather.outputs.failure_count }} failed",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "üîç CI Check Results"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*PR #${{ steps.head.outputs.pr_number }}* <https://github.com/${{ github.repository }}/pull/${{ steps.head.outputs.pr_number }}|${{ github.repository }}#${{ steps.head.outputs.pr_number }}>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Commit:* <https://github.com/${{ github.repository }}/commit/${{ steps.head.outputs.head_sha }}|${{ steps.head.outputs.head_sha }}>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.gather.outputs.summary_text }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*üìä Summary: ${{ steps.gather.outputs.total_count }} checks completed, ${{ steps.gather.outputs.failure_count }} failures*"
                  }
                }
              ]
            }
        continue-on-error: true

      - name: Slack notification result
        if: steps.gather.outputs.should_post == 'true'
        run: |
          echo "üì§ Slack notification step completed"
          echo "Note: Check the step logs above to see if notification was sent successfully"

      - name: Finished (no-op)
        if: steps.gather.outputs.should_post != 'true'
        run: |
          echo "No Slack post yet (reason: ${{ steps.gather.outputs.reason }})"
